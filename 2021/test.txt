inp w     inp w     inp w     inp w     inp w      inp w      inp w     inp w     inp w      inp w     inp w     inp w      inp w      inp w
mul x 0   mul x 0   mul x 0   mul x 0   mul x 0    mul x 0    mul x 0   mul x 0   mul x 0    mul x 0   mul x 0   mul x 0    mul x 0    mul x 0
add x z   add x z   add x z   add x z   add x z    add x z    add x z   add x z   add x z    add x z   add x z   add x z    add x z    add x z
mod x 26  mod x 26  mod x 26  mod x 26  mod x 26   mod x 26   mod x 26  mod x 26  mod x 26   mod x 26  mod x 26  mod x 26   mod x 26   mod x 26
div z 1   div z 1   div z 1   div z 1   div z 26   div z 26   div z 1   div z 1   div z 26   div z 26  div z 1   div z 26   div z 26   div z 26
add x 13  add x 12  add x 12  add x 10  add x -11  add x -13  add x 15  add x 10  add x -2   add x -6  add x 14  add x 0    add x -15  add x -4
eql x w   eql x w   eql x w   eql x w   eql x w    eql x w    eql x w   eql x w   eql x w    eql x w   eql x w   eql x w    eql x w    eql x w
eql x 0   eql x 0   eql x 0   eql x 0   eql x 0    eql x 0    eql x 0   eql x 0   eql x 0    eql x 0   eql x 0   eql x 0    eql x 0    eql x 0
mul y 0   mul y 0   mul y 0   mul y 0   mul y 0    mul y 0    mul y 0   mul y 0   mul y 0    mul y 0   mul y 0   mul y 0    mul y 0    mul y 0
add y 25  add y 25  add y 25  add y 25  add y 25   add y 25   add y 25  add y 25  add y 25   add y 25  add y 25  add y 25   add y 25   add y 25
mul y x   mul y x   mul y x   mul y x   mul y x    mul y x    mul y x   mul y x   mul y x    mul y x   mul y x   mul y x    mul y x    mul y x
add y 1   add y 1   add y 1   add y 1   add y 1    add y 1    add y 1   add y 1   add y 1    add y 1   add y 1   add y 1    add y 1    add y 1
mul z y   mul z y   mul z y   mul z y   mul z y    mul z y    mul z y   mul z y   mul z y    mul z y   mul z y   mul z y    mul z y    mul z y
mul y 0   mul y 0   mul y 0   mul y 0   mul y 0    mul y 0    mul y 0   mul y 0   mul y 0    mul y 0   mul y 0   mul y 0    mul y 0    mul y 0
add y w   add y w   add y w   add y w   add y w    add y w    add y w   add y w   add y w    add y w   add y w   add y w    add y w    add y w
add y 8   add y 13  add y 8   add y 10  add y 12   add y 1    add y 13  add y 5   add y 10   add y 3   add y 2   add y 2    add y 12   add y 7
mul y x   mul y x   mul y x   mul y x   mul y x    mul y x    mul y x   mul y x   mul y x    mul y x   mul y x   mul y x    mul y x    mul y x
add z y   add z y   add z y   add z y   add z y    add z y    add z y   add z y   add z y    add z y   add z y   add z y    add z y    add z y

int func(int z, int w, int d, int t1, int t2) {
  int x = z mod 26 + t1;       // {13,12,12,10,-11,-13,15,10,-2,-6,14, 0,-15,-4}

  int tmpZ = z div d;   // { 1, 1, 1, 1, 26, 26, 1, 1,26,26, 1,26, 26,26}

  if (x != w) {
    z = 26 * tmpZ + w + t2; // { 8,13, 8,10, 12,  1,13, 5,10, 3, 2, 2, 12, 7}
  }
  return z;
}

 1, 1, 1, 1, 26, 26, 1, 1,26,26, 1,26, 26,26
13,12,12,10,-11,-13,15,10,-2,-6,14, 0,-15,-4
 8,13, 8,10, 12,  1,13, 5,10, 3, 2, 2, 12, 7

 14. z = [5,13]
 13. if (x == w) {z = [130,338] + [16,24]} else {w = 1, z = [0,25] \ {16}}

round {5,6,9,10,12,13,14}
z = n * 26 + r
x /= w
deltaZ = w + t2 - r

maximum reduction:
-12 -23 -14 -21 -22 -12 -17 = -121

1  /= r = (w + t2) mod 26
1  == r = lastR
26 /= r = (w + t2) mod 26
26 == r = n mod 26

1  /= n = z + ((w + t2) div 26)
1  == n = lastN
26 /= lastN + ((w + t2) div 26)
26 == n div 26

1 -> either add one layer + calculate new r
     or     pass value through unchanged
26 -> either modify r
      or     use previous n
         if this is wanted imposes condition on the previous r
